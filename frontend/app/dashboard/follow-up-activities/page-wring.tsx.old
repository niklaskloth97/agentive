"use client"

import { DashboardLayout } from "@/components/DashboardLayout"
import Image from "next/image"
import Link from "next/link"
import { Card, CardContent } from "@/components/ui/card"
import { Music, GamepadIcon, FileText, Palette, Video } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { cn } from "@/lib/utils"
import { useState } from "react"
import { Button } from "@/components/ui/button"

// Define a type for activity
type ActivityType = "song" | "game" | "worksheet" | "art" | "video";

interface Activity {
  id: string;
  type: ActivityType;
  title: string;
  description: string;
  filePath: string;
  externalLink: string;
  languages: string[];
}

interface Story {
  id: string;
  title: string;
  description: string;
  image: string;
  activities: Activity[];
}

export default function Page() {
  // Track selected activities
  const [selectedActivities, setSelectedActivities] = useState<Record<string, string>>({});

  const breadcrumbItems = [
    { label: "Multilingual Stories", href: "/dashboard" },
    { label: "Follow-up Activities", href: "/dashboard/follow-up-activities" },
    { label: "Language Awareness", href: "/dashboard/follow-up-activities/language-awareness" }
  ];

  // Sample data for the activities
  const languageAwarenessData = {
    title: "Language Awareness Activities",
    description: "These activities help children develop language awareness skills across multiple languages.",
    activityLabel: "Language Awareness",
    stories: [
      {
        id: "monster-story",
        title: "Monster at the Hairdresser",
        description: "Sound patterns and language comparisons",
        image: "/images/stories/monster-story/monster.png",
        activities: [
          {
            id: "monster-song",
            type: "song" as ActivityType,
            title: "Monster Rhyming Song",
            description: "A catchy song to help identify similar sounds across languages",
            filePath: "/files/monster-story/monster-song.mp3",
            externalLink: "/dashboard/activities/monster-story/monster-song",
            languages: ["English", "German", "French"]
          },
          {
            id: "monster-game",
            type: "game" as ActivityType,
            title: "Sound Matching Game",
            description: "Interactive game to match similar sounds in different languages",
            filePath: "/files/monster-story/sound-game.pdf",
            externalLink: "/dashboard/activities/monster-story/sound-game",
            languages: ["English", "German", "Spanish", "Italian"]
          },
          {
            id: "monster-worksheet",
            type: "worksheet" as ActivityType,
            title: "Word Patterns Worksheet",
            description: "Printable worksheet for recognizing patterns across languages",
            filePath: "/files/monster-story/word-patterns.pdf",
            externalLink: "/dashboard/activities/monster-story/word-patterns",
            languages: ["English", "German", "French", "Italian", "Spanish"]
          }
        ]
      },
      {
        id: "pirate-story",
        title: "Pirate Adventure",
        description: "Maritime vocabulary across languages",
        image: "/images/stories/pirate-story/1.webp",
        activities: [
          {
            id: "pirate-song",
            type: "song" as ActivityType,
            title: "Pirate Language Song",
            description: "Learn how to say pirate terms in different languages",
            filePath: "/files/pirate-story/pirate-song.mp3",
            externalLink: "/dashboard/activities/pirate-story/pirate-song",
            languages: ["English", "German", "French"]
          },
          {
            id: "pirate-art",
            type: "art" as ActivityType,
            title: "Create a Language Map",
            description: "Art activity to create a map of different language islands",
            filePath: "/files/pirate-story/language-map.pdf",
            externalLink: "/dashboard/activities/pirate-story/language-map",
            languages: ["English", "German", "French", "Italian"]
          },
          {
            id: "pirate-game",
            type: "game" as ActivityType,
            title: "Language Treasure Hunt",
            description: "Find hidden treasure by solving language clues",
            filePath: "/files/pirate-story/treasure-hunt.pdf",
            externalLink: "/dashboard/activities/pirate-story/treasure-hunt",
            languages: ["English", "German", "Spanish"]
          }
        ]
      },
      {
        id: "dino-story",
        title: "Daniel Dino Goes on Vacation",
        description: "Travel vocabulary and expressions",
        image: "/images/stories/dino-story/dino.webp",
        activities: [
          {
            id: "dino-game",
            type: "game" as ActivityType,
            title: "Language Bingo",
            description: "Bingo game with travel vocabulary in different languages",
            filePath: "/files/dino-story/language-bingo.pdf",
            externalLink: "/dashboard/activities/dino-story/language-bingo",
            languages: ["English", "German", "French"]
          },
          {
            id: "dino-video",
            type: "video" as ActivityType,
            title: "Travel Words Pronunciation",
            description: "Video showing how to pronounce travel words in different languages",
            filePath: "/files/dino-story/pronunciation.mp4",
            externalLink: "/dashboard/activities/dino-story/pronunciation",
            languages: ["English", "German", "French", "Spanish"]
          },
          {
            id: "dino-worksheet",
            type: "worksheet" as ActivityType,
            title: "Language Comparison Sheet",
            description: "Compare how travel words look and sound in different languages",
            filePath: "/files/dino-story/comparison-sheet.pdf",
            externalLink: "/dashboard/activities/dino-story/comparison-sheet",
            languages: ["English", "German", "French", "Italian"]
          }
        ]
      }
    ]
  };

  // Helper function to render activity icon
  const getActivityIcon = (type: ActivityType) => {
    switch(type) {
      case "song":
        return <Music className="h-4 w-4" />;
      case "game":
        return <GamepadIcon className="h-4 w-4" />;
      case "worksheet":
        return <FileText className="h-4 w-4" />;
      case "art":
        return <Palette className="h-4 w-4" />;
      case "video":
        return <Video className="h-4 w-4" />;
      default:
        return <FileText className="h-4 w-4" />;
    }
  };

  // Handle selection of activity
  const handleActivitySelection = (storyId: string, activityId: string) => {
    setSelectedActivities(prev => {
      if (prev[storyId] === activityId) {
        // If already selected, unselect it
        const newSelections = {...prev};
        delete newSelections[storyId];
        return newSelections;
      } else {
        // Otherwise, select it
        return {
          ...prev,
          [storyId]: activityId
        };
      }
    });
  };

  // Download selected activities
  const downloadSelectedActivities = () => {
    const activitiesToDownload = Object.entries(selectedActivities).map(([storyId, activityId]) => {
      const story = languageAwarenessData.stories.find(s => s.id === storyId);
      const activity = story?.activities.find(a => a.id === activityId);
      return activity;
    }).filter(Boolean);
    
    console.log("Activities to download:", activitiesToDownload);
    // Implement actual download functionality here
  };

  return (
    <DashboardLayout breadcrumbItems={breadcrumbItems}>
      <div className="container py-6">
        <h1 className="text-2xl font-bold mb-2">{languageAwarenessData.title}</h1>
        <p className="text-sm text-muted-foreground mb-4">{languageAwarenessData.description}</p>
        
        <div className="flex justify-end mb-4">
          <Button 
            onClick={downloadSelectedActivities}
            disabled={Object.keys(selectedActivities).length === 0}
            className="text-sm"
          >
            Download Selected Activities
          </Button>
        </div>
        
        {/* Table-style header */}
        <div className="grid grid-cols-6 gap-4 px-4 mb-2 font-medium text-sm text-gray-500">
          <div className="col-span-3">Story</div>
          <div className="col-span-1 text-center">Activity 1</div>
          <div className="col-span-1 text-center">Activity 2</div>
          <div className="col-span-1 text-center">Activity 3</div>
        </div>
        
        {/* Story rows with activities in table format */}
        <div className="space-y-2">
          {languageAwarenessData.stories.map((story) => (
            <Card key={story.id} className="overflow-hidden">
              <CardContent className="p-3">
                <div className="grid grid-cols-6 gap-4 items-center">
                  {/* Story info - takes 3 columns */}
                  <div className="col-span-3 flex items-start gap-3">
                    <div className="w-16 h-16 flex-shrink-0 relative rounded-md overflow-hidden">
                      <Image
                        src={story.image}
                        alt={story.title}
                        fill
                        className="object-cover"
                      />
                    </div>
                    <div>
                      <h3 className="font-medium text-base">{story.title}</h3>
                      <p className="text-xs text-muted-foreground">{story.description}</p>
                    </div>
                  </div>
                  
                  {/* Activities - 1 column each */}
                  {story.activities.map((activity) => (
                    <div key={activity.id} className="col-span-1 flex flex-col items-center">
                      <div className="w-full">
                        <Button
                          onClick={() => handleActivitySelection(story.id, activity.id)}
                          variant={selectedActivities[story.id] === activity.id ? "default" : "outline"}
                          size="sm"
                          className={cn(
                            "w-full border h-auto flex flex-col gap-1 py-2",
                            selectedActivities[story.id] === activity.id ? 
                              "bg-primary text-primary-foreground border-primary" : 
                              "hover:bg-background/80"
                          )}
                        >
                          <div className="flex items-center justify-center gap-1.5">
                            {getActivityIcon(activity.type)}
                            <span className="text-xs font-medium">{activity.type}</span>
                          </div>
                          <span className="text-xs line-clamp-1 font-normal">{activity.title}</span>
                        </Button>
                      </div>
                      
                      <div className="flex flex-wrap items-center justify-center gap-1 mt-2">
                        {activity.languages.map((lang) => (
                          <Badge key={lang} variant="secondary" className="text-[10px] px-1 py-0">
                            {lang.slice(0, 2)}
                          </Badge>
                        ))}
                      </div>
                      
                      <Link 
                        href={activity.externalLink}
                        className="mt-1 text-xs text-primary hover:underline"
                      >
                        View
                      </Link>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </DashboardLayout>
  )
}